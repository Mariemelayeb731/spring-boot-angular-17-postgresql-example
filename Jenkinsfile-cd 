pipeline {
    agent any

    environment {
        DOCKER_IMAGE_BACKEND = 'mariemelayeb/project-backend:latest'
        DOCKER_IMAGE_FRONTEND = 'mariemelayeb/project-angular:latest'
    
    }

    stages {
        stage('Cloner le projet') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/Mariemelayeb731/spring-boot-angular-17-postgresql-example.git'
            }
        }

        stage('Connexion à Docker') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Push Images vers Docker Hub') {
            steps {
                script {
                    dir('spring-boot-server') {
                       sh 'docker tag spring-boot-server mariemelayeb/spring-boot-server:latest'
                sh 'docker push mariemelayeb/spring-boot-server:latest'
                    }
                    dir('angular-17-client') {
                        sh 'docker tag angular-17-client mariemelayeb/angular-17-client:latest'
                sh 'docker push mariemelayeb/angular-17-client:latest'
                    }
                }
            }
        }

        stage('Déploiement sur Kubernetes') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    sh 'kubectl apply -f k8s/'
                }
            }
        }

        stage('Vérification des Pods') {
            steps {
                sh 'kubectl get pods -n $K8S_NAMESPACE'
            }
        }
    }

    post {
        success {
            echo 'Déploiement terminé avec succès.'
        }
        failure {
            echo 'Le déploiement a échoué.'
        }
    }
}
